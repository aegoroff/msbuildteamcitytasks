/*
 * Created by: egr
 * Created at: 03.05.2009
 * © 2007-2015 Alexander Egorov
 */

using System.Collections.Generic;
using Microsoft.Build.Framework;
using MSBuild.TeamCity.Tasks.Messages;

namespace MSBuild.TeamCity.Tasks
{
    /// <summary>
    ///     Support for reporting tests in TeamCity from JUnit Ant task XML reports,
    ///     Maven Surefire XML reports, NUnit-Console XML reports.
    ///     Also supports reporting code inspections from FindBugs and PMD XML reports<p />
    ///     Starting with TeamCity 5.0, NUnit Test Launcher bundles support for .NET code coverage using NCover and PartCover
    ///     coverage engines.<p />
    ///     Starting with TeamCity 5.1, supporting MSTest with Service Messages.<p />
    ///     If you prefer to call the FxCop tool directly from the script, not as a build runner,
    ///     you can use the this task to import an xml file generated by FxCopCmd tool into TeamCity.
    /// </summary>
    /// <example>
    ///     Imports data from FxCop generated file
    ///     <code><![CDATA[
    /// <ImportData
    ///     Type="FxCop"
    ///     Path="C:\FxCop.xml" 
    /// />
    /// ]]></code>
    ///     Imports data from FxCop generated file full example (with all optional attributes)
    ///     <code><![CDATA[
    /// <ImportData
    ///    IsAddTimestamp="true"
    ///    FlowId="1"
    ///    Type="FxCop"
    ///    Path="C:\FxCop.xml" 
    /// />
    /// ]]></code>
    ///     Imports data from NCover generated file
    ///     <code><![CDATA[
    /// <ImportData
    ///    Type="dotNetCoverage"
    ///    Path="C:\Ncover.xml" 
    ///    Tool="ncover" 
    /// />
    /// ]]></code>
    ///     Imports data from FindBugs generated file
    ///     <code><![CDATA[
    /// <ImportData
    ///    Type="findBugs"
    ///    Path="C:\fb report.xml" 
    ///    FindBugsHome="c:\find bugs" 
    /// />
    /// ]]></code>
    ///     Imports data using verbose output to log and user defined action on no data present
    ///     <code><![CDATA[
    /// <ImportData
    ///    Type="FxCop"
    ///    Path="C:\FxCop.xml" 
    ///    WhenNoDataPublished="error"
    ///    Verbose="true"
    /// />
    /// ]]></code>
    /// </example>
    public class ImportData : TeamCityTask
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ImportData" /> class
        /// </summary>
        public ImportData()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ImportData" /> class using
        ///     logger specified
        /// </summary>
        /// <param name="logger"><see cref="ILogger" /> implementation</param>
        public ImportData(ILogger logger)
            : base(logger)
        {
        }

        /// <summary>
        ///     Gets or sets imported data type.<p />
        ///     <b>junit</b> for JUnit Ant task XML reports<br />
        ///     <b>surefire</b> for Maven Surefire XML reports<br />
        ///     <b>nunit</b> for NUnit-Console XML reports<br />
        ///     <b>findBugs</b> for FindBugs inspections XML reports<br />
        ///     <b>pmd</b> for PMD inspections XML reports<br />
        ///     <b>FxCop</b> for FxCop inspections XML reports<br />
        ///     <b>dotNetCoverage</b> Starting with TeamCity 5.0, NUnit Test Launcher bundles support for .NET code coverage using
        ///     NCover and PartCover coverage engines.<br />
        ///     <b>mstest</b> for MSTest XML reports. Starting with TeamCity 5.1<br />
        ///     <b>checkstyle</b> for Checkstyle inspections XML reports. Starting with TeamCity 6.5<br />
        ///     <b>pmdCpd</b> for PMD Copy/Paste Detector (CPD) XML reports. Starting with TeamCity 6.5<br />
        ///     <b>gtest</b> for Google Test XML reports. Starting with TeamCity 6.5<br />
        ///     <b>jslint</b> for JSLint XML reports. Starting with TeamCity 6.5<br />
        ///     <b>ReSharperDupFinder</b> for ReSharper dupfinder.exe XML reports. Starting with TeamCity 6.5<br />
        /// </summary>
        [Required]
        public string Type { get; set; }

        /// <summary>
        ///     Gets or sets full path to data source file to import data from
        /// </summary>
        [Required]
        public string Path { get; set; }

        /// <summary>
        ///     Gets or sets the tool name value can be partcover, ncover, or ncover3, depending on selected coverage tool in the
        ///     coverage settings.
        /// </summary>
        public string Tool { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable detailed logging into the build log. False by default
        /// </summary>
        public bool Verbose { get; set; }

        /// <summary>
        ///     Gets or sets whether process all the files matching the path. Otherwise, only those updated during the build (is
        ///     determined by
        ///     last modification timestamp) are processed. False by default
        /// </summary>
        public bool ParseOutOfDate { get; set; }

        /// <summary>
        ///     Gets or sets the findBugsHome attribute specified pointing to the home directory oif installed FindBugs tool.
        /// </summary>
        public string FindBugsHome { get; set; }

        /// <summary>
        ///     Gets or sets action that will change output level if no reports matching the path specified were found.<p />
        ///     May take the following values: info (default), nothing, warning, error
        /// </summary>
        public string WhenNoDataPublished { get; set; }

        /// <summary>
        ///     Reads TeamCity messages
        /// </summary>
        /// <returns>TeamCity messages list</returns>
        protected override IEnumerable<TeamCityMessage> ReadMessages()
        {
            var context = new ImportDataContext
            {
                ParseOutOfDate = this.ParseOutOfDate,
                Verbose = this.Verbose,
                Path = this.Path,
                WhenNoDataPublished = this.WhenNoDataPublished,
                Type = this.Type.ToImportType()
            };
            yield return new ImportDataMessageBuilder(this.Tool, context, this.FindBugsHome).BuildMessage();
        }
    }
}